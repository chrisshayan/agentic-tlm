[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agentic-tlm"
version = "1.0.0"
description = "Agentic Treasury and Liquidity Management System"
authors = [
    {name = "Treasury AI Team", email = "treasury-ai@yourbank.com"},
]
maintainers = [
    {name = "Treasury AI Team", email = "treasury-ai@yourbank.com"},
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["treasury", "finance", "ai", "agents", "langchain", "banking"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Office/Business :: Financial",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Operating System :: OS Independent",
]

dependencies = [
    # Core AI/ML Framework
    "langchain>=0.1.0",
    "langgraph>=0.0.20",
    "langsmith>=0.0.69",
    "openai>=1.6.1",
    "anthropic>=0.8.1",
    
    # ML and Data Science
    "numpy>=1.24.3",
    "pandas>=2.0.3",
    "scikit-learn>=1.3.0",
    "tensorflow>=2.13.0",
    "torch>=2.0.1",
    "transformers>=4.35.2",
    "sentence-transformers>=2.2.2",
    
    # Vector Database and RAG
    "chromadb>=0.4.18",
    "pinecone-client>=2.2.4",
    "faiss-cpu>=1.7.4",
    
    # Web Framework and API
    "fastapi>=0.104.1",
    "uvicorn>=0.24.0",
    "websockets>=12.0",
    "strawberry-graphql>=0.215.1",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # Database and Storage
    "psycopg2-binary>=2.9.9",
    "redis>=5.0.1",
    "sqlalchemy>=2.0.23",
    "alembic>=1.13.1",
    "influxdb-client>=1.38.0",
    
    # Data Processing and Streaming
    "apache-kafka>=2.0.2",
    "kafka-python>=2.0.2",
    "celery>=5.3.4",
    "polars>=0.20.2",
    
    # Security and Authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "cryptography>=41.0.7",
    
    # Monitoring and Observability
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "sentry-sdk>=1.38.0",
    
    # External APIs and Integrations
    "requests>=2.31.0",
    "aiohttp>=3.9.1",
    "yfinance>=0.2.22",
    "alpha-vantage>=2.3.1",
    "quandl>=3.7.0",
    
    # Utilities and Helpers
    "python-dotenv>=1.0.0",
    "click>=8.1.7",
    "rich>=13.7.0",
    "typer>=0.9.0",
    "httpx>=0.25.2",
    "tenacity>=8.2.3",
    
    # Time Series and Financial Analysis
    "ta-lib>=0.4.28",
    "zipline-reloaded>=3.0.3",
    "pyfolio-reloaded>=0.9.5",
    "empyrical>=0.5.5",
    
    # Configuration Management
    "pyyaml>=6.0.1",
    "toml>=0.10.2",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "factory-boy>=3.3.0",
    "httpx>=0.25.2",
    
    # Development Tools
    "black>=23.11.0",
    "flake8>=6.1.0",
    "mypy>=1.7.1",
    "isort>=5.12.0",
    "pre-commit>=3.6.0",
    
    # Documentation
    "mkdocs>=1.5.3",
    "mkdocs-material>=9.4.8",
    "mkdocs-mermaid2-plugin>=1.1.1",
]

jupyter = [
    # Jupyter and Analysis
    "jupyter>=1.0.0",
    "jupyterlab>=4.0.9",
    "notebook>=7.0.6",
    "plotly>=5.17.0",
    "matplotlib>=3.8.2",
    "seaborn>=0.13.0",
    "ipywidgets>=8.0.0",
]

ml = [
    # Additional ML Libraries
    "xgboost>=1.7.6",
    "lightgbm>=4.1.0",
    "catboost>=1.2.2",
    "optuna>=3.4.0",
    "hyperopt>=0.2.7",
    "mlflow>=2.8.1",
]

all = [
    "agentic-tlm[dev,jupyter,ml]",
]

[project.urls]
Homepage = "https://github.com/your-org/agentic-tlm"
Documentation = "https://agentic-tlm.readthedocs.io"
Repository = "https://github.com/your-org/agentic-tlm"
Issues = "https://github.com/your-org/agentic-tlm/issues"
Changelog = "https://github.com/your-org/agentic-tlm/blob/main/CHANGELOG.md"

[project.scripts]
tlm = "src.main:main"
tlm-agent = "src.cli:agent_cli"
tlm-migrate = "src.cli:migrate_cli"
tlm-worker = "src.cli:worker_cli"

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.toml", "*.cfg", "*.ini"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | migrations
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
skip_gitignore = true
known_first_party = ["src"]
known_third_party = ["langchain", "langgraph", "fastapi", "pydantic", "sqlalchemy"]

# MyPy configuration
[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_error_codes = true
strict_equality = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[[tool.mypy.overrides]]
module = [
    "tests.*",
    "migrations.*",
]
ignore_errors = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "e2e: marks tests as end-to-end tests",
    "agent: marks tests related to agents",
    "api: marks tests related to API endpoints",
    "db: marks tests that require database",
    "external: marks tests that require external services",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/migrations/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# Flake8 configuration
[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':'
    "E501",  # line too long
    "W503",  # line break before binary operator
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    "migrations",
]
per-file-ignores = [
    "__init__.py:F401",
    "tests/*:S101",
]

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "migrations"]
skips = ["B101", "B601"]

# Pre-commit configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            {id = "trailing-whitespace"},
            {id = "end-of-file-fixer"},
            {id = "check-yaml"},
            {id = "check-added-large-files"},
            {id = "check-merge-conflict"},
            {id = "debug-statements"},
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.11.0",
        hooks = [
            {id = "black"}
        ]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [
            {id = "isort"}
        ]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.1.0",
        hooks = [
            {id = "flake8"}
        ]
    },
    {
        repo = "https://github.com/pre-commit/mirrors-mypy",
        rev = "v1.7.1",
        hooks = [
            {id = "mypy", additional_dependencies = ["types-requests", "types-redis"]}
        ]
    },
]

# Ruff configuration (alternative to flake8)
[tool.ruff]
target-version = "py311"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["S101"]

[tool.ruff.isort]
known-first-party = ["src"]
known-third-party = ["langchain", "langgraph", "fastapi", "pydantic", "sqlalchemy"] 