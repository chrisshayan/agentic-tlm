version: '3.8'

services:
  # =============================================================================
  # APPLICATION SERVICES
  # =============================================================================
  
  tlm-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://tlm_user:tlm_password@postgres:5432/tlm_database
      - REDIS_URL=redis://redis:6379/0
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - INFLUXDB_URL=http://influxdb:8086
      - PROMETHEUS_ENABLED=true
      - ENVIRONMENT=development
      - DEBUG=true
    depends_on:
      - postgres
      - redis
      - kafka
      - influxdb
      - chromadb
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./logs:/app/logs
    networks:
      - tlm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  tlm-worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    command: celery -A src.core.celery_app worker --loglevel=info
    environment:
      - DATABASE_URL=postgresql://tlm_user:tlm_password@postgres:5432/tlm_database
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - INFLUXDB_URL=http://influxdb:8086
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
      - kafka
      - influxdb
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    networks:
      - tlm-network
    restart: unless-stopped
    deploy:
      replicas: 2

  tlm-scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    command: celery -A src.core.celery_app beat --loglevel=info
    environment:
      - DATABASE_URL=postgresql://tlm_user:tlm_password@postgres:5432/tlm_database
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - ENVIRONMENT=development
    depends_on:
      - postgres
      - redis
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
    networks:
      - tlm-network
    restart: unless-stopped

  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tlm_database
      POSTGRES_USER: tlm_user
      POSTGRES_PASSWORD: tlm_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    networks:
      - tlm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tlm_user -d tlm_database"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - tlm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    command: redis-server /usr/local/etc/redis/redis.conf

  influxdb:
    image: influxdb:2.7-alpine
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: tlm_admin
      DOCKER_INFLUXDB_INIT_PASSWORD: tlm_password
      DOCKER_INFLUXDB_INIT_ORG: tlm_organization
      DOCKER_INFLUXDB_INIT_BUCKET: tlm_metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: tlm_admin_token_for_development
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - tlm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - tlm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MESSAGING SERVICES
  # =============================================================================
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - tlm-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - tlm-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - tlm-network
    restart: unless-stopped

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - tlm-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - tlm-network
    restart: unless-stopped
    depends_on:
      - prometheus

  # =============================================================================
  # DEVELOPMENT SERVICES
  # =============================================================================
  
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
      target: jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - JUPYTER_TOKEN=tlm_jupyter_token
    volumes:
      - ./notebooks:/home/jovyan/work/notebooks
      - ./src:/home/jovyan/work/src
      - ./data:/home/jovyan/work/data
    networks:
      - tlm-network
    restart: unless-stopped
    profiles:
      - development

  pgadmin:
    image: dpage/pgadmin4:latest
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@tlm.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - tlm-network
    restart: unless-stopped
    depends_on:
      - postgres
    profiles:
      - development

  redis-commander:
    image: rediscommander/redis-commander:latest
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    networks:
      - tlm-network
    restart: unless-stopped
    depends_on:
      - redis
    profiles:
      - development

  # =============================================================================
  # TESTING SERVICES
  # =============================================================================
  
  test-postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: tlm_test
      POSTGRES_USER: tlm_test
      POSTGRES_PASSWORD: tlm_test
    volumes:
      - test_postgres_data:/var/lib/postgresql/data
    networks:
      - tlm-network
    restart: unless-stopped
    profiles:
      - testing

  test-redis:
    image: redis:7-alpine
    volumes:
      - test_redis_data:/data
    networks:
      - tlm-network
    restart: unless-stopped
    profiles:
      - testing

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
  redis_data:
  influxdb_data:
  influxdb_config:
  chromadb_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  prometheus_data:
  grafana_data:
  pgadmin_data:
  test_postgres_data:
  test_redis_data:

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  tlm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 